// Generated by gencpp from file robot_gui_bridge/tictactoemsg.msg
// DO NOT EDIT!


#ifndef ROBOT_GUI_BRIDGE_MESSAGE_TICTACTOEMSG_H
#define ROBOT_GUI_BRIDGE_MESSAGE_TICTACTOEMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_gui_bridge
{
template <class ContainerAllocator>
struct tictactoemsg_
{
  typedef tictactoemsg_<ContainerAllocator> Type;

  tictactoemsg_()
    : player()
    , field()  {
    }
  tictactoemsg_(const ContainerAllocator& _alloc)
    : player(_alloc)
    , field(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _player_type;
  _player_type player;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _field_type;
  _field_type field;





  typedef boost::shared_ptr< ::robot_gui_bridge::tictactoemsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_gui_bridge::tictactoemsg_<ContainerAllocator> const> ConstPtr;

}; // struct tictactoemsg_

typedef ::robot_gui_bridge::tictactoemsg_<std::allocator<void> > tictactoemsg;

typedef boost::shared_ptr< ::robot_gui_bridge::tictactoemsg > tictactoemsgPtr;
typedef boost::shared_ptr< ::robot_gui_bridge::tictactoemsg const> tictactoemsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_gui_bridge::tictactoemsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_gui_bridge::tictactoemsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_gui_bridge::tictactoemsg_<ContainerAllocator1> & lhs, const ::robot_gui_bridge::tictactoemsg_<ContainerAllocator2> & rhs)
{
  return lhs.player == rhs.player &&
    lhs.field == rhs.field;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_gui_bridge::tictactoemsg_<ContainerAllocator1> & lhs, const ::robot_gui_bridge::tictactoemsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_gui_bridge

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_gui_bridge::tictactoemsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_gui_bridge::tictactoemsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_gui_bridge::tictactoemsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_gui_bridge::tictactoemsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_gui_bridge::tictactoemsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_gui_bridge::tictactoemsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_gui_bridge::tictactoemsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ba712bc9f02a35884a6218f01ddb91fc";
  }

  static const char* value(const ::robot_gui_bridge::tictactoemsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xba712bc9f02a3588ULL;
  static const uint64_t static_value2 = 0x4a6218f01ddb91fcULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_gui_bridge::tictactoemsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_gui_bridge/tictactoemsg";
  }

  static const char* value(const ::robot_gui_bridge::tictactoemsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_gui_bridge::tictactoemsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string player\n"
"string field\n"
;
  }

  static const char* value(const ::robot_gui_bridge::tictactoemsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_gui_bridge::tictactoemsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.player);
      stream.next(m.field);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct tictactoemsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_gui_bridge::tictactoemsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_gui_bridge::tictactoemsg_<ContainerAllocator>& v)
  {
    s << indent << "player: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.player);
    s << indent << "field: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.field);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_GUI_BRIDGE_MESSAGE_TICTACTOEMSG_H
